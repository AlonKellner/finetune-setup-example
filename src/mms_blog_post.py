"""Fine_Tune_MMS_on_Common_Voice.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/patrickvonplaten/notebooks/blob/master/Fine_Tune_MMS_on_Common_Voice.ipynb

# **Fine-tuning MMS Adapter Models for Multi-Lingual ASR**

***New (06/2023)***: *This blog post is strongly inspired by "Fine-tuning XLS-R on Multi-Lingual ASR" https://huggingface.co/blog/fine-tune-xlsr-wav2vec2* and can be seen as an improved version of it.

**Wav2Vec2** is a pretrained model for Automatic Speech Recognition (ASR) and was released in [September 2020](https://ai.facebook.com/blog/wav2vec-20-learning-the-structure-of-speech-from-raw-audio/) by *Alexei Baevski, Michael Auli, and Alex Conneau*.  Soon after the superior performance of Wav2Vec2 was demonstrated on one of the most popular English datasets for ASR, called [LibriSpeech](https://huggingface.co/datasets/librispeech_asr), *Facebook AI* presented a multi-lingual version of Wav2Vec2, called [XLSR](https://arxiv.org/abs/2006.13979) and [XLS-R](https://ai.facebook.com/blog/-xlm-r-state-of-the-art-cross-lingual-understanding-through-self-supervision/). XLSR stands for *cross-lingual speech representations* and refers to model's ability to learn speech representations that are useful across multiple languages.

MetaAI's most recent release, the [**Massive Multilingual Speech (MMS)**](https://ai.facebook.com/blog/multilingual-model-speech-recognition/) by *Vineel Pratap, Andros Tjandra, Bowen Shi, et al.* takes multi-lingual speech representations to a new level. Over 1000 spoken languages can be identified, transcribed and generated with the [ASR, LID and TTS checkpoints that were released](https://huggingface.co/models?other=mms).

In this blog post, we show how MMS's Adapter training achieves astonishingly low word error rates after just 10-20 minutes of fine-tuning.

For low-resource languages, we **strongly** recommend using MMS' Adapter training as opposed to fine-tuning the whole model as is done in ["Fine-tuning XLS-R on Multi-Lingual ASR"](https://huggingface.co/blog/fine-tune-xlsr-wav2vec2).

In our experiments, MMS' Adapter training is both more memory efficient, more robust and yields better performance for low-resource languages. For medium to high resource languages it can still be advantegous to fine-tune the whole checkpoint instead of using Adapter layers though.

![wav2vec2_structure](https://raw.githubusercontent.com/patrickvonplaten/scientific_images/master/mms_map.png)

## **Preserving the world's language diversity**

According to https://www.ethnologue.com/ around 3000, or 40% of all "living" languages, are endangered due to fewer and fewer native speakers.
This trend will only continue in an increasingly globalized world.

**MMS** is capable of transcribing many languages which are endangered, such as *Ari* or *Kaivi*. In the future, MMS can play a vital role in keeping languages alive by helping the remaining speakers to create written records and communicating in their native tongue.

To adapt to 1000+ different vocabularies, **MMS** uses of Adapters - a training method where only a small fraction of model weights are trained.

Adapter layers act like linguistic bridges, enabling the model to leverage knowledge from one language when deciphering another.

## **Fine-tuning MMS**

**MMS** unsupervised checkpoints were pre-trained on more than **half a million** hour of audio in over **1400** languages ranging from 300 million to one billion parameters.

You can find the pretrained-only checkpoints on the 🤗 Hub:

- [**`mms-300m`**](https://huggingface.co/facebook/mms-300m)
- [**`mms-1b`**](https://huggingface.co/facebook/mms-1b)

Similar to [BERT's masked language modeling objective](http://jalammar.github.io/illustrated-bert/), MMS learns contextualized speech representations by randomly masking feature vectors before passing them to a transformer network during self-supervised pre-training (*i.e.* diagram on the left below).

For Automatic Speech Recognitino (ASR), the pretrained `MMS-1B` checkpoint was further fine-tuned in supervised fashion on 1000+ languages with a joint vocabulary output layer. As a final step, the joint vocabulary output layer was then thrown away and **only** ca. 2.5M adapter weights are trained on specific languages. The adapter weights hereby include small linear projection layers for each attention block as well as a language-specific vocabulary output layer.

**MMS**'s released three checkpoints fine-tuned for speech recognition (ASR) that have 102, 1107, and 1162 adapter weights respectively (one for each language):

- [**`mms-1b-fl102`**](https://huggingface.co/facebook/mms-1b-fl102)
- [**`mms-1b-l1107`**](https://huggingface.co/facebook/mms-1b-1107)
- [**`mms-1b-all`**](https://huggingface.co/facebook/mms-1b-all)

You can see that the base models are saved (as usual) as a [`model.safetensors` file](https://huggingface.co/facebook/mms-1b-all/blob/main/model.safetensors), but in addition these repositories have many adapter weights stored in the repository, *e.g.* under the name [`adapter.fra.safetensors`](https://huggingface.co/facebook/mms-1b-all/blob/main/adapter.fra.safetensors) for French.

The Hugging Face docs explain very well how such checkpoints can be used for inference [here](https://huggingface.co/docs/transformers/main/en/model_doc/mms#loading), so in this blog post we will instead focus on learning how we can efficiently train highly performant adapter models based on any of the released ASR checkpoints.

## Training adaptive weights

In machine learning, [adapters](https://arxiv.org/pdf/1902.00751.pdf) are a method used to fine-tune pre-trained models while keeping the original model parameters unchanged. They do this by inserting small, trainable modules, called adapter layers, between the pre-existing layers of the model, which then adapt the model to a specific task without requiring extensive retraining.

Adapters have a long history in speech recognition and especially **speaker recognition**. In speaker recognition, adapters have been effectively used to tweak pre-existing models to recognize individual speaker idiosyncrasies, as highlighted in [Gales and Woodland's (1996)](https://www.isca-speech.org/archive_v0/archive_papers/icslp_1996/i96_1832.pdf) and [Miao et al.'s (2014)](https://www.cs.cmu.edu/~ymiao/pub/tasl_sat.pdf) work. This approach not only greatly reduces computational requirements compared to full model, but also allows for better and more flexible speaker-specific adjustments.

The work done in **MMS** leverages this idea of adapters for speech recognition across different languages. Adapter weights a fine-tuned to grasp unique phonetic and grammatical traits of each target language. Thereby, MMS enables a single large base model (*e.g.*, the [**`mms-1b-all`**](https://huggingface.co/facebook/mms-1b-all) checkpoint) and 1000+ small adapter layers (2.5M weights each for **`mms-1b-all`**) to comprehend and transcribe multiple languages. This dramatically reduces the computational demand of developing distinct models for each language.

Great! Now that we understood the motivation and theory, let's look into fine-tuning a couple adapter weights for **`mms-1b-all`** 🔥

## Notebook Setup

As done previously in the ["Fine-tuning XLS-R on Multi-Lingual ASR"](https://huggingface.co/blog/fine-tune-xlsr-wav2vec2) blog post, we fine-tune the model on the low resource ASR dataset of [Common Voice](https://huggingface.co/datasets/common_voice) that contains only *ca.* 4h of validated training data.

Just like Wav2Vec2 or XLS-R, MMS is fine-tuned using Connectionist Temporal Classification (CTC), which is an algorithm that is used to train neural networks for sequence-to-sequence problems, such as ASR and handwriting recognition.

I highly recommend reading the well-written blog post [*Sequence Modeling with CTC (2017)*](https://distill.pub/2017/ctc/) by Awni Hannun.

First, let's try to get a good GPU in our colab! With Google Colab's free version it's sadly becoming much harder to get access to a good GPU. With Google Colab Pro, however, one should easily get either a V100 or P100 GPU.
"""

import json
import os
import random
import re
import tarfile
import tempfile
from collections.abc import Iterator
from dataclasses import dataclass, field
from pathlib import Path
from typing import Any, Protocol, runtime_checkable

import comet_ml
import numpy as np
import polars as pl
import torch
import torchaudio as ta
import uroman
from datasets import Audio, load_dataset
from datasets import Dataset as HFDataset
from evaluate import load
from safetensors.torch import save_file as safe_save_file
from torch import Generator, nn
from torch.utils.data import Dataset as TorchDataset
from torch.utils.data import RandomSampler, SequentialSampler
from tqdm.auto import tqdm
from transformers import (
    EvalPrediction,
    Trainer,
    TrainingArguments,
    Wav2Vec2Config,
    Wav2Vec2CTCTokenizer,
    Wav2Vec2FeatureExtractor,
    Wav2Vec2ForCTC,
    Wav2Vec2Model,
    Wav2Vec2Processor,
    set_seed,
)
from transformers.modeling_utils import PreTrainedModel
from transformers.models.wav2vec2.modeling_wav2vec2 import (
    _HIDDEN_STATES_START_POSITION,
    WAV2VEC2_ADAPTER_SAFE_FILE,
    CausalLMOutput,
    Wav2Vec2BaseModelOutput,
)
from transformers.trainer_pt_utils import LengthGroupedSampler
from transformers.trainer_utils import has_length
from transformers.utils import is_flash_attn_2_available

import wandb


def _compute_mask_indices_with_lengths(
    shape: tuple[int, int],
    mask_prob: float,
    mask_length: int,
    output_lengths: torch.LongTensor | None = None,
    min_masks: int = 0,
) -> np.ndarray:
    """Spec augment indices.

    Computes random mask spans for a given shape. Used to implement [SpecAugment: A Simple Data Augmentation Method for
    ASR](https://arxiv.org/abs/1904.08779). Note that this method is not optimized to run on TPU and should be run on
    CPU as part of the preprocessing during training.

    Args:
        shape: The shape for which to compute masks. This should be of a tuple of size 2 where
               the first element is the batch size and the second element is the length of the axis to span.
        mask_prob:  The percentage of the whole axis (between 0 and 1) which will be masked. The number of
                    independently generated mask spans of length `mask_length` is computed by
                    `mask_prob*shape[1]/mask_length`. Note that due to overlaps, `mask_prob` is an upper bound and the
                    actual percentage will be smaller.
        mask_length: size of the mask
        min_masks: minimum number of masked spans
        attention_mask: A (right-padded) attention mask which independently shortens the feature axis of
                        each batch dimension.
    """
    batch_size, sequence_length = shape

    if mask_length < 1:
        raise ValueError("`mask_length` has to be bigger than 0.")

    if mask_length > sequence_length:
        raise ValueError(
            f"`mask_length` has to be smaller than `sequence_length`, but got `mask_length`: {mask_length}"
            f" and `sequence_length`: {sequence_length}`"
        )

    # epsilon is used for probabilistic rounding
    epsilon = np.random.rand(1).item()

    def compute_num_masked_span(input_length: int) -> int:
        """Given input length, compute how many spans should be masked."""
        num_masked_span = int(mask_prob * input_length / mask_length + epsilon)
        num_masked_span = max(num_masked_span, min_masks)

        # make sure num masked span <= sequence_length
        if num_masked_span * mask_length > sequence_length:
            num_masked_span = sequence_length // mask_length

        # make sure num_masked span is also <= input_length - (mask_length - 1)
        if input_length - (mask_length - 1) < num_masked_span:
            num_masked_span = max(input_length - (mask_length - 1), 0)

        return num_masked_span

    # compute number of masked spans in batch
    input_lengths = (
        output_lengths.detach().tolist()
        if output_lengths is not None
        else [sequence_length for _ in range(batch_size)]
    )

    # SpecAugment mask to fill
    spec_aug_mask = np.zeros((batch_size, sequence_length), dtype=bool)
    spec_aug_mask_idxs = []

    max_num_masked_span = compute_num_masked_span(sequence_length)

    if max_num_masked_span == 0:
        return spec_aug_mask

    for input_length in input_lengths:
        # compute num of masked spans for this input
        num_masked_span = compute_num_masked_span(input_length)

        # get random indices to mask
        spec_aug_mask_idx = np.random.choice(
            np.arange(input_length - (mask_length - 1)), num_masked_span, replace=False
        )

        # pick first sampled index that will serve as a dummy index to pad vector
        # to ensure same dimension for all batches due to probabilistic rounding
        # Picking first sample just pads those vectors twice.
        if len(spec_aug_mask_idx) == 0:
            # this case can only happen if `input_length` is strictly smaller then
            # `sequence_length` in which case the last token has to be a padding
            # token which we can use as a dummy mask id
            dummy_mask_idx = sequence_length - 1
        else:
            dummy_mask_idx = spec_aug_mask_idx[0]

        spec_aug_mask_idx = np.concatenate(
            [
                spec_aug_mask_idx,
                np.ones(max_num_masked_span - num_masked_span, dtype=np.int32)
                * dummy_mask_idx,
            ]
        )
        spec_aug_mask_idxs.append(spec_aug_mask_idx)

    spec_aug_mask_idxs = np.array(spec_aug_mask_idxs)

    # expand masked indices to masked spans
    spec_aug_mask_idxs = np.broadcast_to(
        spec_aug_mask_idxs[:, :, None], (batch_size, max_num_masked_span, mask_length)
    )
    spec_aug_mask_idxs = spec_aug_mask_idxs.reshape(
        batch_size, max_num_masked_span * mask_length
    )

    # add offset to the starting indexes so that indexes now create a span
    offsets = np.arange(mask_length)[None, None, :]
    offsets = np.broadcast_to(
        offsets, (batch_size, max_num_masked_span, mask_length)
    ).reshape(batch_size, max_num_masked_span * mask_length)
    spec_aug_mask_idxs = spec_aug_mask_idxs + offsets

    # ensure that we cannot have indices larger than sequence_length
    if spec_aug_mask_idxs.max() > sequence_length - 1:
        spec_aug_mask_idxs[spec_aug_mask_idxs > sequence_length - 1] = (
            sequence_length - 1
        )

    # scatter indices to mask
    np.put_along_axis(spec_aug_mask, spec_aug_mask_idxs, 1, -1)

    return spec_aug_mask


class CustomWav2Vec2ForCTC(Wav2Vec2ForCTC):
    """Custom faster wav2vec2 implementation."""

    def __init__(self, config: Wav2Vec2Config, target_lang: str | None = None) -> None:
        super().__init__(config)

        # self.wav2vec2 = CustomWav2Vec2Model(config)
        self.wav2vec2 = Wav2Vec2Model(config)
        self.dropout = nn.Dropout(config.final_dropout)

        self.target_lang = target_lang

        if config.vocab_size is None:
            raise ValueError(
                f"You are trying to instantiate {self.__class__} with a configuration that "
                "does not define the vocabulary size of the language model head. Please "
                "instantiate the model as follows: `Wav2Vec2ForCTC.from_pretrained(..., vocab_size=vocab_size)`. "
                "or define `vocab_size` of your model's configuration."
            )
        output_hidden_size = (
            config.output_hidden_size
            if hasattr(config, "add_adapter") and config.add_adapter
            else config.hidden_size
        )
        self.lm_head = nn.Linear(output_hidden_size, config.vocab_size)

        # Initialize weights and apply final processing
        self.post_init()

    def forward(
        self,
        input_values: torch.Tensor | None,
        attention_mask: torch.Tensor | None = None,
        output_attentions: bool | None = None,
        output_hidden_states: bool | None = None,
        return_dict: bool | None = None,
        labels: torch.Tensor | None = None,
        flat_labels: torch.Tensor | None = None,
    ) -> tuple | CausalLMOutput:
        """Forward."""
        return_dict = (
            return_dict if return_dict is not None else self.config.use_return_dict
        )

        if labels is not None and labels.max() >= self.config.vocab_size:
            raise ValueError(
                f"Label values must be <= vocab_size: {self.config.vocab_size}"
            )

        outputs = self.wav2vec2(
            input_values,
            attention_mask=attention_mask,
            output_attentions=output_attentions,
            output_hidden_states=output_hidden_states,
            return_dict=return_dict,
        )

        hidden_states = outputs[0]
        hidden_states = self.dropout(hidden_states)

        logits = self.lm_head(hidden_states)

        loss = None
        if labels is not None and flat_labels is not None:
            # retrieve loss input_lengths from attention_mask
            attention_mask = (
                attention_mask
                if attention_mask is not None
                else torch.ones_like(input_values, dtype=torch.long)  # type: ignore
            )  # type: ignore
            input_lengths = self._get_feat_extract_output_lengths(
                attention_mask.sum(-1)  # type: ignore
            ).to(torch.long)  # type: ignore

            # assuming that padded tokens are filled with -100
            # when not being attended to
            target_lengths, flattened_targets = self.labels_for_ctc(labels, flat_labels)

            # ctc_loss doesn't support fp16
            log_probs = nn.functional.log_softmax(
                logits, dim=-1, dtype=torch.float32
            ).transpose(0, 1)

            with torch.backends.cudnn.flags(enabled=True, benchmark=True):
                loss = nn.functional.ctc_loss(
                    log_probs,
                    flattened_targets,
                    input_lengths,
                    target_lengths,
                    blank=self.config.pad_token_id,
                    reduction=self.config.ctc_loss_reduction,
                    zero_infinity=self.config.ctc_zero_infinity,
                )

        if not return_dict:
            output = (logits,) + outputs[_HIDDEN_STATES_START_POSITION:]
            return (loss, *output) if loss is not None else output

        return CausalLMOutput(
            loss=loss,  # type: ignore
            logits=logits,
            hidden_states=outputs.hidden_states,
            attentions=outputs.attentions,
        )

    def labels_for_ctc(
        self, labels: torch.Tensor, flat_labels: torch.Tensor
    ) -> tuple[torch.Tensor, torch.Tensor]:
        """Return labels formatting for CTC loss."""
        labels_mask = labels >= 0
        target_lengths = labels_mask.sum(-1)
        return target_lengths, flat_labels


def get_length_grouped_indices_shuffled(
    lengths: list[int],
    batch_size: int,
    mega_batch_mult: int | None = None,
    generator: Generator | None = None,
) -> list[int]:
    """Get shuffled megabatches, A custom version. First is still largest.

    Return a list of indices so that each slice of `batch_size` consecutive indices correspond to elements of similar
    lengths. To do this, the indices are:

    - randomly permuted
    - grouped in mega-batches of size `mega_batch_mult * batch_size`
    - sorted by length in each mega-batch

    The result is the concatenation of all mega-batches, with the batch of `batch_size` containing the element of
    maximum length placed first, so that an OOM happens sooner rather than later.
    """
    # Default for mega_batch_mult: 50 or the number to get 4 megabatches, whichever is smaller.
    if mega_batch_mult is None:
        mega_batch_mult = min(len(lengths) // (batch_size * 4), 50)
        # Just in case, for tiny datasets
        if mega_batch_mult == 0:
            mega_batch_mult = 1

    # We need to use torch for the random part as a distributed sampler will set the random seed for torch.
    indices = torch.randperm(len(lengths), generator=generator)
    megabatch_size = mega_batch_mult * batch_size
    megabatches = [
        indices[i : i + megabatch_size].tolist()
        for i in range(0, len(lengths), megabatch_size)
    ]
    megabatches = [
        sorted(megabatch, key=lambda i: lengths[i], reverse=True)
        for megabatch in megabatches
    ]

    # The rest is to get the biggest batch first.
    # Since each megabatch is sorted by descending length, the longest element is the first
    megabatch_maximums = [lengths[megabatch[0]] for megabatch in megabatches]
    max_idx = torch.argmax(torch.tensor(megabatch_maximums)).item()
    assert isinstance(max_idx, int)
    # Switch to put the longest element in first position
    megabatches[0][0], megabatches[max_idx][0] = (
        megabatches[max_idx][0],
        megabatches[0][0],
    )

    batches = [
        [
            megabatch[i * batch_size : (i + 1) * batch_size]
            for i in range(mega_batch_mult)
            if (i * batch_size < len(megabatch))
        ]
        for megabatch in megabatches
    ]

    first_batch = batches[0][0]
    batches = [batches[0][1:], *batches[1:]]

    batches = [
        [
            megabatch[i]
            for i in torch.randperm(len(megabatch), generator=generator).tolist()
        ]
        for megabatch in batches
    ]
    batches = [[first_batch, *batches[0]], *batches[1:]]

    indices = [i for megabatch in batches for batch in megabatch for i in batch]
    assert len(indices) == len(lengths)
    assert len(set(indices)) == len(lengths)
    assert max(indices) == len(lengths) - 1
    assert min(indices) == 0
    return indices


class CustomLengthGroupedSampler(LengthGroupedSampler):
    """Custom sampler for random order."""

    def __init__(
        self, *args: Any, mega_batch_mult: int | None = None, **kwargs: Any
    ) -> None:
        super().__init__(*args, **kwargs)
        self.mega_batch_mult = mega_batch_mult

    def __iter__(self) -> Iterator[int]:
        """Get iterator with shuffled indices."""
        indices = get_length_grouped_indices_shuffled(
            self.lengths,
            self.batch_size,
            generator=self.generator,
            mega_batch_mult=self.mega_batch_mult,
        )
        return iter(indices)


@dataclass
class CustomTrainingArguments(TrainingArguments):
    """Custom training args."""

    mega_batch_mult: int = field(
        default=50, metadata={"help": "The mega batch multiple."}
    )
    has_length_column: bool = field(
        default=True,
        metadata={
            "help": "Sets whether the dataset has a length column for length sampling."
        },
    )


class CustomTrainer(Trainer):
    """A custom version of the trainer to make sure length sampling is mixed."""

    def __init__(
        self,
        model: PreTrainedModel | nn.Module | None = None,
        args: CustomTrainingArguments | None = None,
        *arguments: Any,
        **kwargs: Any,
    ) -> None:
        super().__init__(model, args, *arguments, **kwargs)  # type: ignore
        assert args is not None
        self.args = args

    def _get_train_sampler(self) -> torch.utils.data.Sampler | None:
        if self.train_dataset is None or not has_length(self.train_dataset):
            return None

        # Build the sampler.
        if self.args.group_by_length:
            if self.args.has_length_column:
                lengths = (
                    self.train_dataset[self.args.length_column_name]  # type: ignore
                    if self.args.length_column_name in self.train_dataset.column_names  # type: ignore
                    else None
                )
            else:
                lengths = None
            model_input_name = (
                self.processing_class.model_input_names[0]  # type: ignore
                if self.processing_class is not None
                else None
            )
            return CustomLengthGroupedSampler(
                self.args.train_batch_size * self.args.gradient_accumulation_steps,
                dataset=self.train_dataset,  # type: ignore
                lengths=lengths,
                model_input_name=model_input_name,
                mega_batch_mult=self.args.mega_batch_mult,
            )

        else:
            return RandomSampler(self.train_dataset)  # type: ignore

    def _get_eval_sampler(  # type: ignore
        self, eval_dataset: HFDataset
    ) -> torch.utils.data.Sampler | None:
        if eval_dataset is None or not has_length(eval_dataset):
            return None

        # Build the sampler.
        if self.args.group_by_length:
            if self.args.has_length_column:
                lengths = (
                    eval_dataset[self.args.length_column_name]
                    if self.args.length_column_name in eval_dataset.column_names
                    else None
                )
            else:
                lengths = None
            model_input_name = (
                self.tokenizer.model_input_names[0]
                if self.tokenizer is not None
                else None
            )
            return CustomLengthGroupedSampler(
                self.args.eval_batch_size,
                dataset=eval_dataset,
                lengths=lengths,
                model_input_name=model_input_name,
            )

        if self.args.world_size <= 1:
            return SequentialSampler(eval_dataset)
        else:
            return None


class CustomWav2Vec2Model(Wav2Vec2Model):
    """Custom model."""

    def forward(
        self,
        input_values: torch.Tensor | None,
        attention_mask: torch.Tensor | None = None,
        mask_time_indices: torch.FloatTensor | None = None,
        output_attentions: bool | None = None,
        output_hidden_states: bool | None = None,
        return_dict: bool | None = None,
    ) -> tuple | Wav2Vec2BaseModelOutput:
        """Forward."""
        output_attentions = (
            output_attentions
            if output_attentions is not None
            else self.config.output_attentions
        )
        output_hidden_states = (
            output_hidden_states
            if output_hidden_states is not None
            else self.config.output_hidden_states
        )
        return_dict = (
            return_dict if return_dict is not None else self.config.use_return_dict
        )

        extract_features = self.feature_extractor(input_values)
        extract_features = extract_features.transpose(1, 2)

        output_lengths = None
        if attention_mask is not None:
            # compute reduced attention_mask corresponding to feature vectors
            attention_mask, output_lengths = (
                self._get_feature_vector_attention_mask_and_lengths(
                    extract_features.shape[1],
                    attention_mask,  # type: ignore
                    add_adapter=False,  # type: ignore
                )
            )

        hidden_states, extract_features = self.feature_projection(extract_features)
        hidden_states = self._mask_hidden_states_with_lengths(
            hidden_states,
            mask_time_indices=mask_time_indices,
            output_lengths=output_lengths,
        )

        encoder_outputs = self.encoder(
            hidden_states,
            attention_mask=attention_mask,
            output_attentions=output_attentions,
            output_hidden_states=output_hidden_states,
            return_dict=return_dict,
        )

        hidden_states = encoder_outputs[0]

        if self.adapter is not None:
            hidden_states = self.adapter(hidden_states)

        if not return_dict:
            return (hidden_states, extract_features) + encoder_outputs[1:]

        return Wav2Vec2BaseModelOutput(
            last_hidden_state=hidden_states,
            extract_features=extract_features,
            hidden_states=encoder_outputs.hidden_states,
            attentions=encoder_outputs.attentions,
        )

    def _mask_hidden_states_with_lengths(
        self,
        hidden_states: torch.FloatTensor,
        mask_time_indices: torch.FloatTensor | None = None,
        output_lengths: torch.LongTensor | None = None,
    ) -> torch.Tensor:
        """Spec augment.

        Masks extracted features along time axis and/or along feature axis according to [SpecAugment](https://arxiv.org/abs/1904.08779).
        """
        # `config.apply_spec_augment` can set masking to False
        if not getattr(self.config, "apply_spec_augment", True):
            return hidden_states

        # generate indices & apply SpecAugment along time axis
        batch_size, sequence_length, hidden_size = hidden_states.size()

        if mask_time_indices is not None:
            # apply SpecAugment along time axis with given mask_time_indices
            hidden_states[mask_time_indices] = self.masked_spec_embed.to(
                hidden_states.dtype
            )
        elif self.config.mask_time_prob > 0 and self.training:
            mask_time_indices = _compute_mask_indices_with_lengths(  # type: ignore
                (batch_size, sequence_length),
                mask_prob=self.config.mask_time_prob,
                mask_length=self.config.mask_time_length,
                min_masks=self.config.mask_time_min_masks,
                output_lengths=output_lengths,
            )
            mask_time_indices = torch.tensor(
                mask_time_indices, device=hidden_states.device, dtype=torch.bool
            )  # type: ignore
            hidden_states[mask_time_indices] = self.masked_spec_embed.to(
                hidden_states.dtype
            )

        if self.config.mask_feature_prob > 0 and self.training:
            # generate indices & apply SpecAugment along feature axis
            mask_feature_indices = _compute_mask_indices_with_lengths(
                (batch_size, hidden_size),
                mask_prob=self.config.mask_feature_prob,
                mask_length=self.config.mask_feature_length,
                min_masks=self.config.mask_feature_min_masks,
                output_lengths=output_lengths,
            )
            mask_feature_indices = torch.tensor(
                mask_feature_indices, device=hidden_states.device, dtype=torch.bool
            )
            mask_feature_indices = mask_feature_indices[:, None].expand(
                -1, sequence_length, -1
            )
            hidden_states[mask_feature_indices] = 0

        return hidden_states

    def _get_feature_vector_attention_mask_and_lengths(
        self,
        feature_vector_length: int,
        attention_mask: torch.LongTensor,
        add_adapter: bool | None = None,
    ) -> tuple[torch.LongTensor, torch.LongTensor]:
        # Effectively attention_mask.sum(-1), but not inplace to be able to run
        # on inference mode.
        non_padded_lengths = attention_mask.cumsum(dim=-1)[:, -1]
        output_lengths: torch.LongTensor
        output_lengths = self._get_feat_extract_output_lengths(
            non_padded_lengths,  # type: ignore
            add_adapter=add_adapter,  # type: ignore
        )
        output_lengths = output_lengths.to(torch.long)  # type: ignore
        attention_mask = torch.arange(
            feature_vector_length,
            device=attention_mask.device,  # type: ignore
        ).unsqueeze(0) < output_lengths.unsqueeze(1)
        return attention_mask, output_lengths


class FlacDataset(TorchDataset):
    """A wrapping dataset for caching audio as local flac files."""

    def __init__(
        self,
        inner_dataset: HFDataset | TorchDataset,
        cache_path: str | Path,
        sample_rate: int,
        metadata: dict[int, dict[str, Any]] | None = None,
    ) -> None:
        self._inner_dataset = inner_dataset
        self.cache_path = Path(cache_path)
        self.metadata_path = self.cache_path / "metadata.parquet"
        if metadata is None:
            metadata = self._init_metadata()
        self.metadata = metadata
        self.sample_rate = sample_rate

    def __del__(self) -> None:
        """Save the metadata as a parquet."""
        self.save_metadata()

    def save_metadata(self) -> None:
        """Save the metadata as a parquet."""
        import polars as pl

        pl.from_dicts(
            [
                dict(i=i, **self.metadata[i])
                for i in range(len(self))
                if i in self.metadata
            ]
        ).sort(by="i").write_parquet(self.metadata_path)

    def __getattr__(self, name: str) -> Any:
        """Delegate to the inner if it has the attribute."""
        result = getattr(self._inner_dataset, name)
        if issubclass(type(result), HFDataset) or issubclass(
            type(result), TorchDataset
        ):
            result = FlacDataset(
                result, self.cache_path, self.sample_rate, self.metadata
            )
        return result

    def _init_metadata(self) -> dict[int, dict[str, Any]]:
        if self.metadata_path.exists():
            df = pl.read_parquet(self.metadata_path).sort(by="i")
            return {
                row["i"]: {k: v for k, v in row.items() if k != "i"}
                for row in df.to_dicts()
            }
        else:
            return dict()

    def __len__(self) -> int:
        """Propegates the length of the inner dataset."""
        return len(self._inner_dataset)  # type: ignore

    def __getitems__(self, keys: list) -> list:
        """Can be used to get a batch using a list of integers indices."""
        return [self[k] for k in keys]

    def __getitem__(self, index: int | str) -> dict[str, Any] | Any:
        """Return the item corresponding to the index while caching both metadata and audio to files."""
        if isinstance(index, str):
            return self._inner_dataset[index]

        item = None

        index = index % len(self)

        padded_index = str(index).zfill(len(str(len(self._inner_dataset))))  # type: ignore
        flac_path = Path(self.cache_path) / f"{padded_index}.flac"
        if flac_path.exists():
            samples = self._load_flac(flac_path)
        else:
            if item is None:
                item = self._inner_dataset[index]
            samples = item["input_values"]
            self._save_flac(flac_path, samples)

        if index in self.metadata:
            item_metadata = self.metadata[index]
        else:
            if item is None:
                item = self._inner_dataset[index]
            item_metadata = {k: v for k, v in item.items() if k != "input_values"}
            self.metadata[index] = item_metadata

        item = dict(
            input_values=samples,
            **item_metadata,
            indices=index,
            file_paths=str(flac_path),
            file_sizes=flac_path.stat().st_size,
        )
        return item

    def _save_flac(self, flac_path: Path, samples: list[int]) -> None:
        ta.save(
            str(flac_path.absolute()), torch.tensor(samples)[None, :], self.sample_rate
        )

    def _load_flac(self, flac_path: Path) -> list[int]:
        samples, sr = ta.load(flac_path.absolute())
        assert sr == self.sample_rate
        assert samples.shape[0] == 1
        return samples[0, :].tolist()


class TarS3Dataset(TorchDataset):
    """A wrapping dataset for caching files to s3."""

    def __init__(
        self,
        inner_dataset: HFDataset | TorchDataset,
        cache_path: str | Path,
        s3_client: Any,
        cache_bucket: str,
        indices_order: list[int],
    ) -> None:
        self._inner_dataset = inner_dataset
        self.cache_path = Path(cache_path)
        self.metadata_path = self.cache_path / "metadata.parquet"
        self.s3_client = s3_client
        self.cache_bucket = cache_bucket
        self.indices_order = indices_order
        self._upload(["metadata.parquet"], "metadata")

    def __del__(self) -> None:
        """Save the metadata as a parquet."""
        self._upload(["metadata.parquet"], "metadata")

    def __getattr__(self, name: str) -> Any:
        """Delegate to the inner if it has the attribute."""
        result = getattr(self._inner_dataset, name)
        if issubclass(type(result), HFDataset) or issubclass(
            type(result), TorchDataset
        ):
            result = TarS3Dataset(
                result,
                self.cache_path,
                self.s3_client,
                self.cache_bucket,
                self.indices_order,
            )
        return result

    def _exists(self, name: str) -> bool:
        acl_metadata = self.s3_client.get_object_acl(
            Bucket=self.cache_bucket, Key=name
        )["ResponseMetadata"]
        return (
            ("HTTPStatusCode" in acl_metadata)
            and (acl_metadata["HTTPStatusCode"] == 200)
            and ("HTTPHeaders" in acl_metadata)
            and ("content-length" in acl_metadata["HTTPHeaders"])
            and (int(acl_metadata["HTTPHeaders"]["content-length"]) > 0)
        )

    def _upload(self, files: list[str], name: str) -> None:
        if self._exists(name):
            return
        with tempfile.NamedTemporaryFile() as f:
            with tarfile.open(f.name, "w:gz") as tar:
                for file_name in files:
                    file_path = str(self.cache_path / file_name)
                    if os.path.exists(file_path):
                        tar.add(file_path, arcname=os.path.basename(file_path))
                    else:
                        print(
                            f"Warning: {file_path} does not exist and will be skipped."
                        )

            self.s3_client.upload_file(
                Filename=f.name, Bucket=self.cache_bucket, Key=f"{name}.tar.gz"
            )

    def _download(self, name: str) -> None:
        with tempfile.NamedTemporaryFile() as f:
            self.s3_client.download_file(
                Bucket=self.cache_bucket, Key=f"{name}.tar.gz", Filename=f.name
            )
            with tarfile.open(f.name, "r:gz") as tar:
                tar.extractall(path=self.cache_path, filter="data")

    def __len__(self) -> int:
        """Propegates the length of the inner dataset."""
        return len(self._inner_dataset)  # type: ignore

    def __getitems__(self, keys: list) -> list:
        """Can be used to get a batch using a list of integers indices."""
        return [self[k] for k in keys]

    def __getitem__(self, index: int | str) -> dict[str, Any] | Any:
        """Return the item corresponding to the index while caching both metadata and audio to files."""
        if isinstance(index, str):
            return self._inner_dataset[index]

        item = None

        index = index % len(self)

        padded_index = str(index).zfill(len(str(len(self._inner_dataset))))  # type: ignore
        flac_path = Path(self.cache_path) / f"{padded_index}.flac"
        if flac_path.exists():
            samples = self._load_flac(flac_path)
        else:
            if item is None:
                item = self._inner_dataset[index]
            samples = item["input_values"]
            self._save_flac(flac_path, samples)

        if index in self.metadata:
            item_metadata = self.metadata[index]
        else:
            if item is None:
                item = self._inner_dataset[index]
            item_metadata = {k: v for k, v in item.items() if k != "input_values"}
            self.metadata[index] = item_metadata

        item = dict(
            input_values=samples, **item_metadata, indices=index, paths=str(flac_path)
        )
        return item

    def _save_flac(self, flac_path: Path, samples: list[int]) -> None:
        ta.save(
            str(flac_path.absolute()), torch.tensor(samples)[None, :], self.sample_rate
        )

    def _load_flac(self, flac_path: Path) -> list[int]:
        samples, sr = ta.load(flac_path.absolute())
        assert sr == self.sample_rate
        assert samples.shape[0] == 1
        return samples[0, :].tolist()


# gpu_info = !nvidia-smi
# gpu_info = '\n'.join(gpu_info)
# if gpu_info.find('failed') >= 0:
#   print('Not connected to a GPU')
# else:
#   print(gpu_info)

"""Before we start, let's install `datasets` and `transformers`. Also, we need the `torchaudio` to load audio files and `jiwer` to evaluate our fine-tuned model using the [word error rate (WER)](https://huggingface.co/metrics/wer) metric ${}^1$."""

# Commented out IPython magic to ensure Python compatibility.

"""We strongly suggest to upload your training checkpoints directly to the [🤗 Hub](https://huggingface.co/) while training. The [🤗 Hub](https://huggingface.co/) has integrated version control so you can be sure that no model checkpoint is getting lost during training.

To do so you have to store your authentication token from the Hugging Face website (sign up [here](https://huggingface.co/join) if you haven't already!)
"""

"""## Prepare Data, Tokenizer, Feature Extractor

ASR models transcribe speech to text, which means that we both need a feature extractor that processes the speech signal to the model's input format, *e.g.* a feature vector, and a tokenizer that processes the model's output format to text.

In 🤗 Transformers, the MMS model is thus accompanied by both a tokenizer, called [Wav2Vec2CTCTokenizer](https://huggingface.co/transformers/master/model_doc/wav2vec2.html#wav2vec2ctctokenizer), and a feature extractor, called [Wav2Vec2FeatureExtractor](https://huggingface.co/transformers/master/model_doc/wav2vec2.html#wav2vec2featureextractor).

Let's start by creating the tokenizer to decode the predicted output classes to the output transcription.

### Create `Wav2Vec2CTCTokenizer`

Fine-tuned MMS models, such as [**`mms-1b-all`**](https://huggingface.co/facebook/mms-1b-all) already have a [tokenizer](https://huggingface.co/facebook/mms-1b-all/blob/main/tokenizer_config.json) accompanying the model checkpoint. However since we want to fine-tune the model on specific low-resource data of a certain language, it is recommended to fully remove the tokenizer, and vocabulary output layer and simply create a new ones based on the training data itself.

Remember that Wav2Vec2-like models fine-tuned on CTC transcribe an audio file with a single forward pass by first processing the audio input into a sequence of processed context representations and then using the final vocabulary output layer to classify each context representation to a character that represents the transcription.

The output size of this layer corresponds to the number of tokens in the vocabulary, and therefore only on the labeled dataset used for fine-tuning. So in the first step, we will take a look at the chosen dataset of Common Voice and define a vocabulary based on the transcriptions.

For this notebook, we will use [Common Voice's 6.1 dataset](https://huggingface.co/datasets/mozilla-foundation/common_voice_6_1) for Turkish. Turkish corresponds to the language code `"tr"`.

Now we can use 🤗 Datasets' simple API to download the data. The dataset name is `"mozilla-foundation/common_voice_6_1"`, the configuration name corresponds to the language code, which is `"tr"` in our case.

**Note**: Before being able to download the dataset, you have to access it by logging into your Hugging Face account, going on the [dataset repo page](https://huggingface.co/datasets/mozilla-foundation/common_voice_6_1) and clicking on:

Common Voice has many different splits including `invalidated`, which refers to data that was not rated as "clean enough" to be considered useful. In this notebook, we will only make use of the splits `"train"`, `"validation"` and `"test"`.

Because the Turkish dataset is so small, we will merge both the validation and training data into a training dataset and only use the test data for validation.
"""
if is_flash_attn_2_available():
    print("Flash-attn 2 Available.")
else:
    print("WARNING: Can't access flash-attn 2!")

print(f"torchaudio backends: {ta.list_audio_backends()}")

seed = 42
set_seed(seed)

common_voice_train = load_dataset(
    "mozilla-foundation/common_voice_17_0",
    "tr",
    # split="train+validation",
    split="train",
    token=True,
    trust_remote_code=True,
    # streaming=True,
)
assert isinstance(common_voice_train, HFDataset)
common_voice_test = load_dataset(
    "mozilla-foundation/common_voice_17_0",
    "tr",
    split="test",
    token=True,
    trust_remote_code=True,
    # streaming=True,
)
assert isinstance(common_voice_test, HFDataset)

"""Many ASR datasets only provide the target text, `'sentence'` for each audio array `'audio'` and file `'path'`. Common Voice actually provides much more information about each audio file, such as the `'accent'`, etc. Keeping the notebook as general as possible, we only consider the transcribed text for fine-tuning.


"""

common_voice_train = common_voice_train.remove_columns(
    [
        "accent",
        "age",
        "client_id",
        "down_votes",
        "gender",
        "locale",
        "segment",
        "up_votes",
    ]
)
common_voice_test = common_voice_test.remove_columns(
    [
        "accent",
        "age",
        "client_id",
        "down_votes",
        "gender",
        "locale",
        "segment",
        "up_votes",
    ]
)

"""Let's write a short function to display some random samples of the dataset and run it a couple of times to get a feeling for the transcriptions."""

"""Alright! The transcriptions look fairly clean. Having translated the transcribed sentences, it seems that the language corresponds more to written-out text than noisy dialogue. This makes sense considering that [Common Voice](https://huggingface.co/datasets/common_voice) is a crowd-sourced read speech corpus.

We can see that the transcriptions contain some special characters, such as `,.?!;:`. Without a language model, it is much harder to classify speech chunks to such special characters because they don't really correspond to a characteristic sound unit. *E.g.*, the letter `"s"` has a more or less clear sound, whereas the special character `"."` does not.
Also in order to understand the meaning of a speech signal, it is usually not necessary to include special characters in the transcription.

Let's simply remove all characters that don't contribute to the meaning of a word and cannot really be represented by an acoustic sound and normalize the text.
"""

chars_to_remove_regex = r"[`,?\.!\-;:\"“%‘”�()…’]"  # noqa: RUF001
Batch = dict[str, Any]
ur = uroman.Uroman()
target_lang = "tur"


def uromanize(batch: Batch) -> Batch:
    """Uromanize text."""
    clean_string = re.sub(chars_to_remove_regex, "", batch["sentence"]).lower()
    batch["sentence"] = ur.romanize_string(clean_string, lcode=target_lang)
    return batch


common_voice_train = common_voice_train.map(uromanize)
common_voice_test = common_voice_test.map(uromanize)

"""Let's look at the processed text labels again."""

"""Good! This looks better. We have removed most special characters from transcriptions and normalized them to lower-case only.

Before finalizing the pre-processing, it is always advantageous to consult a native speaker of the target language to see whether the text can be further simplified.
For this blog post, [Merve](https://twitter.com/mervenoyann) was kind enough to take a quick look and noted that "hatted" characters - like `â` - aren't really used anymore in Turkish and can be replaced by their "un-hatted" equivalent, *e.g.* `a`.

Let's write another short mapping function to further simplify the text labels. Remember - the simler the text labels, the easier it is for the model to learn to predict those labels.


"""


"""In CTC, it is common to classify speech chunks into letters, so we will do the same here.
Let's extract all distinct letters of the training and test data and build our vocabulary from this set of letters.

We write a mapping function that concatenates all transcriptions into one long transcription and then transforms the string into a set of chars.
It is important to pass the argument `batched=True` to the `map(...)` function so that the mapping function has access to all transcriptions at once.
"""

Vocab = dict[str, Any]


def extract_all_chars(batch: Batch) -> Vocab:
    """Extract all chars from batch."""
    all_text = " ".join(batch["sentence"])
    vocab = list(set(all_text))
    return {"vocab": [vocab], "all_text": [all_text]}


# vocab_train = common_voice_train.map(
#     extract_all_chars,
#     batched=True,
#     batch_size=-1,
#     keep_in_memory=True,
#     remove_columns=common_voice_train.column_names,
# )
# vocab_test = common_voice_test.map(
#     extract_all_chars,
#     batched=True,
#     batch_size=-1,
#     keep_in_memory=True,
#     remove_columns=common_voice_test.column_names,
# )

"""Now, we create the union of all distinct letters in the training dataset and test dataset and convert the resulting list into an enumerated dictionary."""

# vocab_list = list(set(vocab_train["vocab"][0]) | set(vocab_test["vocab"][0]))

# vocab_dict = {v: k for k, v in enumerate(sorted(vocab_list))}
# print(vocab_dict)

"""Cool, we see that all letters of the alphabet occur in the dataset (which is not really surprising) and we also extracted the special characters `""` and `'`. Note that we did not exclude those special characters because:

The model has to learn to predict when a word is finished or else the model prediction would always be a sequence of chars which would make it impossible to separate words from each other.

One should always keep in mind that pre-processing is a very important step before training your model. E.g., we don't want our model to differentiate between `a` and `A` just because we forgot to normalize the data. The difference between `a` and `A` does not depend on the "sound" of the letter at all, but more on grammatical rules - *e.g.* use a capitalized letter at the beginning of the sentence. So it is sensible to remove the difference between capitalized and non-capitalized letters so that the model has an easier time learning to transcribe speech.

To make it clearer that `" "` has its own token class, we give it a more visible character `|`. In addition, we also add an "unknown" token so that the model can later deal with characters not encountered in Common Voice's training set.
"""

# vocab_dict["|"] = vocab_dict[" "]
# del vocab_dict[" "]

"""Finally, we also add a padding token that corresponds to CTC's "*blank token*". The "blank token" is a core component of the CTC algorithm. For more information, please take a look at the "Alignment" section [here](https://distill.pub/2017/ctc/)."""

# vocab_dict["[UNK]"] = len(vocab_dict)
# vocab_dict["[PAD]"] = len(vocab_dict)
# len(vocab_dict)

"""Cool, now our vocabulary is complete and consists of 37 tokens, which means that the linear layer that we will add on top of the pretrained MMS checkpoint as part of the adapter weights will have an output dimension of 37.

Since a single MMS checkpoint can provide customized weights for multiple languages, the tokenizer can also consist of multiple vocabularies. Therefore, we need nest our `vocab_dict` to potentially add more languages to the vocabulary in the future. The dictionary should be nested with the name that is used for the adapter weights and that is saved in the tokenizer config under the name [`target_lang`](https://huggingface.co/docs/transformers/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer.target_lang).

Let's use the ISO-639-3 language codes as is used for the original [**`mms-1b-all`**](https://huggingface.co/facebook/mms-1b-all) checkpoint.
"""

"""Let's define an empty dictionary to which we can append the just created vocabulary"""

# new_vocab_dict = {target_lang: vocab_dict}

"""**Note**: In case you want to use this notebook to add a new adapter layer to *an existing model repo* use make sure to **not** create an empty, new vocab dict, but instead re-use one that already exists. To do so you should uncomment the following cells and replace `mms_adapter_repo` with a model repo id to which you want to add your adapter weights."""

# from transformers import Wav2Vec2CTCTokenizer

# mms_adapter_repo = "patrickvonplaten/wav2vec2-large-mms-1b-turkish-colab"  # make sure to replace this path with a repo to which you want to add your new adapter weights

hf_repo = "mms-meta/mms-zeroshot-300m"
print(f"hf_repo: {hf_repo}")
tokenizer = Wav2Vec2CTCTokenizer.from_pretrained(hf_repo)
vocab_dict = tokenizer.vocab

# new_vocab[target_lang] = vocab_dict
new_vocab_dict = {target_lang: vocab_dict}

"""Let's now save the vocabulary as a json file."""

with open(".output/vocab.json", "w") as vocab_file:
    json.dump(new_vocab_dict, vocab_file)

"""In a final step, we use the json file to load the vocabulary into an instance of the `Wav2Vec2CTCTokenizer` class."""

tokenizer: Wav2Vec2CTCTokenizer = Wav2Vec2CTCTokenizer.from_pretrained(
    ".output/",
    unk_token=tokenizer.unk_token,
    pad_token=tokenizer.pad_token,
    word_delimiter_token=tokenizer.word_delimiter_token,
    bos_token=tokenizer.bos_token,
    eos_token=tokenizer.eos_token,
    target_lang=target_lang,
)

"""If one wants to re-use the just created tokenizer with the fine-tuned model of this notebook, it is strongly advised to upload the `tokenizer` to the [🤗 Hub](https://huggingface.co/). Let's call the repo to which we will upload the files
`"wav2vec2-large-xlsr-turkish-demo-colab"`:
"""

repo_name = "mms-300m-turkish"

"""and upload the tokenizer to the [🤗 Hub](https://huggingface.co/)."""

tokenizer.push_to_hub(repo_name)  # type: ignore

"""Great, you can see the just created repository under `https://huggingface.co/<your-username>/wav2vec2-large-mms-1b-tr-colab`

### Create `Wav2Vec2FeatureExtractor`

Speech is a continuous signal and to be treated by computers, it first has to be discretized, which is usually called **sampling**. The sampling rate hereby plays an important role in that it defines how many data points of the speech signal are measured per second. Therefore, sampling with a higher sampling rate results in a better approximation of the *real* speech signal but also necessitates more values per second.

A pretrained checkpoint expects its input data to have been sampled more or less from the same distribution as the data it was trained on. The same speech signals sampled at two different rates have a very different distribution, *e.g.*, doubling the sampling rate results in data points being twice as long. Thus,
before fine-tuning a pretrained checkpoint of an ASR model, it is crucial to verify that the sampling rate of the data that was used to pretrain the model matches the sampling rate of the dataset used to fine-tune the model.

MMS was pre-trained at a sampling rate of 16kHz. Common Voice, in its original form, has a sampling rate of 48kHz, thus we will have to downsample the fine-tuning data to 16kHz in the following.

A `Wav2Vec2FeatureExtractor` object requires the following parameters to be instantiated:

- `feature_size`: Speech models take a sequence of feature vectors as an input. While the length of this sequence obviously varies, the feature size should not. In the case of Wav2Vec2, the feature size is 1 because the model was trained on the raw speech signal ${}^2$.
- `sampling_rate`: The sampling rate at which the model is trained on.
- `padding_value`: For batched inference, shorter inputs need to be padded with a specific value
- `do_normalize`: Whether the input should be *zero-mean-unit-variance* normalized or not. Usually, speech models perform better when normalizing the input
- `return_attention_mask`: Whether the model should make use of an `attention_mask` for batched inference. In general, XLS-R models checkpoints should **always** use the `attention_mask`.
"""

sample_rate = 16_000

feature_extractor = Wav2Vec2FeatureExtractor(
    feature_size=1,
    sampling_rate=sample_rate,
    padding_value=0.0,
    do_normalize=True,
    return_attention_mask=True,
)

"""Great, MMS's feature extraction pipeline is thereby fully defined!

For improved user-friendliness, the feature extractor and tokenizer are *wrapped* into a single `Wav2Vec2Processor` class so that one only needs a `model` and `processor` object.
"""


@runtime_checkable
class HasCustomFields(Protocol):
    """Just for pyright type checking."""

    tokenizer: Wav2Vec2CTCTokenizer
    feature_extractor: Wav2Vec2FeatureExtractor


processor: Wav2Vec2Processor = Wav2Vec2Processor(
    feature_extractor=feature_extractor, tokenizer=tokenizer
)
assert isinstance(processor, HasCustomFields) and isinstance(
    processor, Wav2Vec2Processor
)

"""Next, we can prepare the dataset.

### Preprocess Data

So far, we have not looked at the actual values of the speech signal but just the transcription. In addition to `sentence`, our datasets include two more column names `path` and `audio`. `path` states the absolute path of the audio file. Let's take a look.
"""

common_voice_train[0]["path"]

"""MMS expects the input in the format of a 1-dimensional array of 16 kHz. This means that the audio file has to be loaded and resampled.

 Thankfully, `datasets` does this automatically by calling the other column `audio`. Let try it out.
"""

common_voice_train[0]["audio"]

"""In the example above we can see that the audio data is loaded with a sampling rate of 48kHz whereas 16kHz are expected by the model. We can set the audio feature to the correct sampling rate by making use of [`cast_column`](https://huggingface.co/docs/datasets/package_reference/main_classes.html?highlight=cast_column#datasets.DatasetDict.cast_column):"""

common_voice_train = common_voice_train.cast_column(
    "audio", Audio(sampling_rate=sample_rate)
)
common_voice_test = common_voice_test.cast_column(
    "audio", Audio(sampling_rate=sample_rate)
)

"""Let's take a look at `"audio"` again."""

common_voice_train[0]["audio"]

"""This seemed to have worked! Let's listen to a couple of audio files to better understand the dataset and verify that the audio was correctly loaded.

**Note**: *You can click the following cell a couple of times to listen to different speech samples.*
"""


rand_int = random.randint(0, len(common_voice_train) - 1)

print(common_voice_train[rand_int]["sentence"])

"""It seems like the data is now correctly loaded and resampled.

It can be heard, that the speakers change along with their speaking rate, accent, and background environment, etc. Overall, the recordings sound acceptably clear though, which is to be expected from a crowd-sourced read speech corpus.

Let's do a final check that the data is correctly prepared, by printing the shape of the speech input, its transcription, and the corresponding sampling rate.

**Note**: *You can click the following cell a couple of times to verify multiple samples.*
"""

rand_int = random.randint(0, len(common_voice_train) - 1)

print("Target text:", common_voice_train[rand_int]["sentence"])
print("Input array shape:", common_voice_train[rand_int]["audio"]["array"].shape)
print("Sampling rate:", common_voice_train[rand_int]["audio"]["sampling_rate"])

"""Good! Everything looks fine - the data is a 1-dimensional array, the sampling rate always corresponds to 16kHz, and the target text is normalized.

Finally, we can leverage `Wav2Vec2Processor` to process the data to the format expected by `Wav2Vec2ForCTC` for training. To do so let's make use of Dataset's [`map(...)`](https://huggingface.co/docs/datasets/package_reference/main_classes.html?highlight=map#datasets.DatasetDict.map) function.

First, we load and resample the audio data, simply by calling `batch["audio"]`.
Second, we extract the `input_values` from the loaded audio file. In our case, the `Wav2Vec2Processor` only normalizes the data. For other speech models, however, this step can include more complex feature extraction, such as [Log-Mel feature extraction](https://en.wikipedia.org/wiki/Mel-frequency_cepstrum).
Third, we encode the transcriptions to label ids.
"""


def prepare_dataset(batch: Batch) -> Batch:
    """Prepare dataset."""
    audio = batch["audio"]
    batch["input_values"] = processor(
        audio["array"], sampling_rate=audio["sampling_rate"]
    ).input_values[0]
    batch["length"] = len(batch["input_values"])

    batch["labels"] = processor(text=batch["sentence"]).input_ids  # type: ignore
    return batch


"""Let's apply the data preparation function to all examples."""

common_voice_train = common_voice_train.map(
    prepare_dataset, remove_columns=common_voice_train.column_names
)
common_voice_test = common_voice_test.map(
    prepare_dataset, remove_columns=common_voice_test.column_names
)

common_voice_train = FlacDataset(
    common_voice_train.shuffle(seed=seed), "./.app_cache/train_set/", sample_rate
)
print(list(common_voice_train[0].keys()))
print(list(common_voice_train[-1].keys()))

eval_size = 3200

common_voice_test = FlacDataset(
    common_voice_test.shuffle(seed=seed).select(range(eval_size)),
    "./.app_cache/test_set/",
    sample_rate,
)
print(list(common_voice_test[0].keys()))
print(list(common_voice_test[-1].keys()))

for i in tqdm(list(range(len(common_voice_test)))):
    item = common_voice_test[i]
common_voice_test.save_metadata()

for i in tqdm(list(range(len(common_voice_train)))):
    item = common_voice_train[i]
common_voice_train.save_metadata()

"""**Note**: `datasets` automatically takes care of audio loading and resampling. If you wish to implement your own customized data loading/sampling, feel free to just make use of the `"path"` column instead and disregard the `"audio"` column.

Awesome, now we are ready to start training!

## Training

The data is processed so that we are ready to start setting up the training pipeline. We will make use of 🤗's [Trainer](https://huggingface.co/transformers/master/main_classes/trainer.html?highlight=trainer) for which we essentially need to do the following:

- Define a data collator. In contrast to most NLP models, MMS has a much larger input length than output length. *E.g.*, a sample of input length 50000 has an output length of no more than 100. Given the large input sizes, it is much more efficient to pad the training batches dynamically meaning that all training samples should only be padded to the longest sample in their batch and not the overall longest sample. Therefore, fine-tuning MMS requires a special padding data collator, which we will define below

- Evaluation metric. During training, the model should be evaluated on the word error rate. We should define a `compute_metrics` function accordingly

- Load a pretrained checkpoint. We need to load a pretrained checkpoint and configure it correctly for training.

- Define the training configuration.

After having fine-tuned the model, we will correctly evaluate it on the test data and verify that it has indeed learned to correctly transcribe speech.

### Set-up Trainer

Let's start by defining the data collator. The code for the data collator was copied from [this example](https://github.com/huggingface/transformers/blob/7e61d56a45c19284cfda0cee8995fb552f6b1f4e/examples/pytorch/speech-recognition/run_speech_recognition_ctc.py#L219).

Without going into too many details, in contrast to the common data collators, this data collator treats the `input_values` and `labels` differently and thus applies to separate padding functions on them (again making use of MMS processor's context manager). This is necessary because in speech input and output are of different modalities meaning that they should not be treated by the same padding function.
Analogous to the common data collators, the padding tokens in the labels with `-100` so that those tokens are **not** taken into account when computing the loss.
"""


@dataclass
class DataCollatorCTCWithPadding:
    """
    Data collator that will dynamically pad the inputs received.

    Args:
        processor (:class:`~transformers.Wav2Vec2Processor`)
            The processor used for processing the data.
        padding (:obj:`bool`, :obj:`str` or :class:`~transformers.tokenization_utils_base.PaddingStrategy`, `optional`, defaults to :obj:`True`):
            Select a strategy to pad the returned sequences (according to the model's padding side and padding index)
            among:
            * :obj:`True` or :obj:`'longest'`: Pad to the longest sequence in the batch (or no padding if only a single
              sequence if provided).
            * :obj:`'max_length'`: Pad to a maximum length specified with the argument :obj:`max_length` or to the
              maximum acceptable input length for the model if that argument is not provided.
            * :obj:`False` or :obj:`'do_not_pad'` (default): No padding (i.e., can output a batch with sequences of
              different lengths).
    """

    processor: Wav2Vec2Processor
    padding: bool | str = True

    def __call__(
        self, features: list[dict[str, list[int] | torch.Tensor]]
    ) -> dict[str, torch.Tensor]:
        """Collates the features."""
        # split inputs and labels since they have to be of different lengths and need
        # different padding methods
        input_features = [
            {"input_values": feature["input_values"]} for feature in features
        ]
        label_features = [{"input_ids": feature["labels"]} for feature in features]

        batch = self.processor.pad(
            input_features,
            padding=self.padding,
            return_tensors="pt",
        )
        labels_batch = self.processor.pad(
            labels=label_features,
            padding=self.padding,
            return_tensors="pt",
        )

        # replace padding with -100 to ignore loss correctly
        labels = labels_batch["input_ids"].masked_fill(
            labels_batch.attention_mask.ne(1), -100
        )

        batch["labels"] = labels
        batch["flat_labels"] = torch.cat(
            [torch.tensor(feature["labels"]) for feature in features]
        )  # type: ignore

        return batch


data_collator = DataCollatorCTCWithPadding(processor=processor, padding=True)

"""Next, the evaluation metric is defined. As mentioned earlier, the
predominant metric in ASR is the word error rate (WER), hence we will use it in this notebook as well.
"""

wer_metric = load("wer")
cer_metric = load("cer")


Metrics = dict[str, Any]


def compute_metrics(pred: EvalPrediction) -> Metrics:
    """Compute metrics."""
    pred_logits = pred.predictions
    pred_ids = np.argmax(pred_logits, axis=-1)

    assert isinstance(processor, HasCustomFields)
    if isinstance(pred.label_ids, tuple):
        pred.label_ids = pred.label_ids[0]
    pred.label_ids[pred.label_ids == -100] = processor.tokenizer.pad_token_id  # type: ignore

    pred_str = processor.batch_decode(pred_ids)
    # we do not want to group tokens when computing the metrics
    label_str = processor.batch_decode(pred.label_ids, group_tokens=False)

    wer = wer_metric.compute(predictions=pred_str, references=label_str)
    cer = cer_metric.compute(predictions=pred_str, references=label_str)
    for i in range(100):
        print(f'({i}) pred: "{pred_str[i]}"')
        print(f'({i}) targ: "{label_str[i]}"')
    return {"wer": wer, "cer": cer}


"""Now, we can load the pretrained checkpoint of [**`mms-all-1b`**](https://huggingface.co/facebook/mms-1b-all). The tokenizer's `pad_token_id` must be to define the model's `pad_token_id` or in the case of `Wav2Vec2ForCTC` also CTC's *blank token* ${}^2$.

Since, we're only training a small subset of weights, the model is not prone to overfitting. Therefore, we make sure to disable all dropout layers.

**Note**: When using this notebook to train MMS on another language of Common Voice those hyper-parameter settings might not work very well. Feel free to adapt those depending on your use case.
"""

model = CustomWav2Vec2ForCTC.from_pretrained(
    hf_repo,
    hidden_dropout=0.0,
    activation_dropout=0.0,
    attention_dropout=0.0,
    feat_proj_dropout=0.0,
    feat_quantizer_dropout=0.0,
    final_dropout=0.0,
    layerdrop=0.0,
    ctc_loss_reduction="mean",
    # pad_token_id=processor.tokenizer.pad_token_id,
    vocab_size=len(processor.tokenizer),
    adapter_attn_dim=len(processor.tokenizer),
    ignore_mismatched_sizes=True,
    # attn_implementation="flash_attention_2",
    attn_implementation="sdpa",
)

"""**Note**: It is expected that some weights are newly initialized. Those weights correspond to the newly initilaized vocabulary output layer.

We now want to make sure that only the adapter weights will be trained and that the rest of the model stays frozen.

First, we re-initialize all the adapter weights which can be done with the handy `init_adapter_layers` method. It is also possible to not re-initialize the adapter weights and continue fine-tuning, but in this case one should make sure to load fitting adapter weights via the [`load_adapter(...)` method](https://huggingface.co/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC.load_adapter) before training. Often the vocabulary still will not match the custom training data very well though, so it's usually easier to just re-initialize all adapter layers so that they can be easily fine-tuned.
"""

model.init_adapter_layers()

"""Next, we freeze all weights, **but** the adapter layers."""

model.freeze_base_model()
model.freeze_feature_encoder()

adapter_weights = model._get_adapters()
for param in adapter_weights.values():
    param.requires_grad = True

"""In a final step, we define all parameters related to training.
To give more explanation on some of the parameters:
- `group_by_length` makes training more efficient by grouping training samples of similar input length into one batch. This can significantly speed up training time by heavily reducing the overall number of useless padding tokens that are passed through the model
- `learning_rate` was chosen to be 1e-3 which is a common default value for training with Adam. Other learning rates might work equally well.

For more explanations on other parameters, one can take a look at the [docs](https://huggingface.co/transformers/master/main_classes/trainer.html?highlight=trainer#trainingarguments).

To save GPU memory, we enable PyTorch's [gradient checkpointing](https://pytorch.org/docs/stable/checkpoint.html) and also set the loss reduction to "*mean*".

MMS adapter fine-tuning converges extremely fast to very good performance, so even for a dataset as small as 4h we will only train for 4 epochs.

During training, a checkpoint will be uploaded asynchronously to the hub every 200 training steps. It allows you to also play around with the demo widget even while your model is still training.

**Note**: If one does not want to upload the model checkpoints to the hub, simply set `push_to_hub=False`.
"""

comet_ml.login(project_name=os.getenv("WANDB_PROJECT"))

num_train_epochs = 5
# num_train_epochs = 1
effective_batch_size = 16
per_device_train_batch_size = 4
per_device_eval_batch_size = 8
num_devices = 1
warmup_ratio = 0.1
decay_ratio = 0.7

global_batch_size = per_device_train_batch_size * num_devices
accumulation_steps = effective_batch_size // global_batch_size

num_training_steps = (
    len(common_voice_train) // effective_batch_size
) * num_train_epochs

lr_scheduler_kwargs = dict(num_decay_steps=int(decay_ratio * num_training_steps))

training_args = CustomTrainingArguments(  # type: ignore
    seed=seed,
    report_to=["comet_ml", "wandb"],
    output_dir=f".output/{repo_name}",
    run_name=repo_name,
    group_by_length=True,
    per_device_train_batch_size=per_device_train_batch_size,
    per_device_eval_batch_size=per_device_eval_batch_size,
    gradient_accumulation_steps=accumulation_steps,
    eval_strategy="steps",
    num_train_epochs=num_train_epochs,
    mega_batch_mult=100,
    dataloader_num_workers=4,
    # dataloader_num_workers=0,
    dataloader_drop_last=True,
    gradient_checkpointing=True,
    fp16=False,
    save_steps=1000,
    eval_steps=1000,
    logging_steps=100,
    eval_on_start=True,
    logging_first_step=True,
    learning_rate=1e-3,
    lr_scheduler_type="warmup_stable_decay",
    warmup_steps=int(warmup_ratio * num_training_steps),
    lr_scheduler_kwargs=lr_scheduler_kwargs,
    weight_decay=0.01,
    save_total_limit=2,
    # push_to_hub=True,
    push_to_hub=False,
    logging_nan_inf_filter=True,
    load_best_model_at_end=True,
    metric_for_best_model="wer",
    greater_is_better=False,
    log_level="info",
    # torch_compile=True,
    torch_compile=False,
)

"""Now, all instances can be passed to Trainer and we are ready to start training!"""
trainer = CustomTrainer(
    model=model,  # type: ignore
    data_collator=data_collator,
    args=training_args,
    compute_metrics=compute_metrics,
    train_dataset=common_voice_train,
    eval_dataset=common_voice_test,
    processing_class=processor.feature_extractor,
)

"""---

${}^1$ To allow models to become independent of the speaker rate, in CTC, consecutive tokens that are identical are simply grouped as a single token. However, the encoded labels should not be grouped when decoding since they don't correspond to the predicted tokens of the model, which is why the `group_tokens=False` parameter has to be passed. If we wouldn't pass this parameter a word like `"hello"` would incorrectly be encoded, and decoded as `"hello"`.

${}^2$ The blank token allows the model to predict a word, such as `"hello"` by forcing it to insert the blank token between the two l's. A CTC-conform prediction of `"hello"` of our model would be `[PAD] [PAD] "h" "e" "e" "l" "l" [PAD] "l" "o" "o" [PAD]`.

### Training

Training should take less than 30 minutes depending on the GPU allocated to this notebook.

In case you want to use this google colab to fine-tune your model, you should make sure that your training doesn't stop due to inactivity. A simple hack to prevent this is to paste the following code into the console of this tab (*right mouse click -> inspect -> Console tab and insert code*).

```javascript
function ConnectButton(){
    console.log("Connect pushed");
    document.querySelector("#top-toolbar > colab-connect-button").shadowRoot.querySelector("#connect").click()
}
setInterval(ConnectButton,60000);
```

Cool, let's start training!
"""

trainer.train()
trainer.evaluate()

del common_voice_train
del common_voice_test
wandb.finish()
comet_ml.end()
# print("Auto-selected batch size:", trainer.args.per_device_train_batch_size)

# torch.cuda.memory._record_memory_history(max_entries=1000000)
# try:
#     trainer.train()
# finally:
#     torch.cuda.memory._dump_snapshot("src/mms_blog_post.memdump.pickle")

"""The training loss and validation WER go down nicely.

We see that fine-tuning adapter layers of `mms-1b-all` for just 100 steps outperforms fine-tuning the whole `xls-r-300m` checkpoint as shown [here](https://huggingface.co/blog/fine-tune-xlsr-wav2vec2#training-1) already by a large margin.

From the [official paper](https://scontent-cdg4-3.xx.fbcdn.net/v/t39.8562-6/348827959_6967534189927933_6819186233244071998_n.pdf?_nc_cat=104&ccb=1-7&_nc_sid=ad8a9d&_nc_ohc=fSo3qQ7uxr0AX8EWnWl&_nc_ht=scontent-cdg4-3.xx&oh=00_AfBL34K0MAAPb0CgnthjbHfiB6pSnnwbn5esj9DZVPvyoA&oe=6495E802) and this quick comparison it becomes clear that `mms-1b-all` has a much higher capability of transferring knowledge to a low-resource language and should be preferred over `xls-r-300m`. In addition, training is also more memory-efficient as only a small subset of layers are trained.

The adapter weights will be uploaded as part of the model checkpoint, but we also want to make sure to save them separately so that they can easily be off- and onloaded.

Let's save all the adapter layers into the training output dir so that it can be correctly uploaded to the Hub.
"""

adapter_file = WAV2VEC2_ADAPTER_SAFE_FILE.format(target_lang)
assert training_args.output_dir is not None
adapter_file = os.path.join(training_args.output_dir, adapter_file)

safe_save_file(model._get_adapters(), adapter_file, metadata={"format": "pt"})

"""Finally, you can upload the result of the training to the 🤗 Hub."""

trainer.push_to_hub()

"""One of the main advantage of adapter weights training is that the "base" model which makes up roughly 99% of the model weights is kept unchanged and only a small [2.5M adapter checkpoint](https://huggingface.co/patrickvonplaten/wav2vec2-large-mms-1b-turkish-colab/blob/main/adapter.tur.safetensors) has to be shared in order to use the trained checkpoint.

This makes it extremely simply to train additional adapter layers and add them to your repository.

You can do some very easily by simply re-running this script and changing the language you would like to train on to a different one, *e.g.* `swe` for Swedish. In addition, you should make sure that the vocabulary does not get completely overwritten but that the new language vocabulary is **appended** to the existing one as stated above in the commented out cells.

To demonstrate how different adapter layers can be loaded, I have trained and uploaded also an adapter layer for Swedish under the iso language code `swe` as you can see [here](https://huggingface.co/patrickvonplaten/wav2vec2-large-mms-1b-turkish-colab/blob/main/adapter.swe.safetensors)

You can load the fine-tuned checkpoint as usual by using `from_pretrained(...)`, but you should make sure to also add a `target_lang="<your-lang-code>"` to the method so that the correct adapter is loaded. Also should you set the target language correctly for your tokenizer.

Let's see how we can load the Turkish checkpoint first.
"""

model_id = f"Kellner/{repo_name}"

model = CustomWav2Vec2ForCTC.from_pretrained(model_id, target_lang=target_lang).to(
    "cuda"  # type: ignore
)
_processor = Wav2Vec2Processor.from_pretrained(model_id)
assert isinstance(_processor, HasCustomFields) and isinstance(
    _processor, Wav2Vec2Processor
)
processor = _processor

processor.tokenizer.set_target_lang(target_lang)  # type: ignore

"""Let's check that the model can correctly transcribe Turkish"""

common_voice_test_tr: HFDataset = load_dataset(
    "mozilla-foundation/common_voice_17_0",
    "tr",
    data_dir="./cv-corpus-17.0-2024-03-20",
    split="test",
    token=True,
    trust_remote_code=True,
    # streaming=True,
)  # type: ignore
common_voice_test_tr = common_voice_test_tr.cast_column(
    "audio", Audio(sampling_rate=sample_rate)
)

"""Let's process the audio, run a forward pass and predict the ids"""

input_dict = processor(
    common_voice_test_tr[0]["audio"]["array"],
    sampling_rate=sample_rate,
    return_tensors="pt",
    padding=True,
)

logits = model(input_dict.input_values.to("cuda")).logits

pred_ids = torch.argmax(logits, dim=-1)[0]

"""
Finally, we can decode the example."""

print("Prediction:")
print(processor.decode(pred_ids))

print("\nReference:")
print(common_voice_test_tr[0]["sentence"].lower())

"""This looks like it's almost exactly right, just two empty spaces should have been added in the first word.

Now it is very simple to change the adapter to Swedish by calling [`model.load_adapter(...)`](mozilla-foundation/common_voice_6_1) and by changing the tokenizer to Swedish as well.
"""

"""Great, this looks like a perfect transcription!

We've shown in this blog post how MMS Adapter Weights fine-tuning not only gives state-of-the-art performance on low-resource languages, but also significantly speeds up training time and allows to easily build a collection of customized adapter weights.

*Related posts and additional links are listed here:*
- [**Official paper**](https://huggingface.co/papers/2305.13516)
- [**Original cobebase**](https://github.com/facebookresearch/fairseq/tree/main/examples/mms/asr)
- [**Official demo**](https://huggingface.co/spaces/facebook/MMS)
- [**Transformers Docs**](https://huggingface.co/docs/transformers/index)
- [**Related XLS-R blog post**](https://huggingface.co/blog/fine-tune-xlsr-wav2vec2)
- [**Models on the Hub**](https://huggingface.co/models?other=mms)
"""
